![NACAC](http://logo.clearbit.com/nacacnet.org)

# NACAC Repository

Welcome to the NACAC Repository! There are a total of 3 sites; Main, Conferences and Fairs

### Assets

- [Wire Fames](http://a12upd.axshare.com/#p=nacacnet_org_home__desktop_)
- [Site Map](http://yj8lu1.axshare.com/#p=nacac_proposed_sitemap)
- [Prototypes](https://projects.invisionapp.com/share/JS68XQ798#/screens)
- [Style Tiles](https://projects.invisionapp.com/boards/7ZU742J5QEH9/)

### Features
- **CSS:** [Sass](http://sass-lang.com/) (indented, scss, or both)
  - Libsass (node-sass) for super fast compiles
  - Autoprefixer
- **JS:** Modular ES6 with [Babel](http://babeljs.io/) and [Webpack](http://webpack.github.io/)
  - Async requires
  - Multiple bundles
  - Shared modules
  - Source Maps
- **HTML**: Static templating with [Nunjucks](https://mozilla.github.io/nunjucks/) and [gulp-data](https://github.com/colynb/gulp-data)
- **Images:**
  - **SVG Sprites**: Compiles a spritesheet from a folder of SVGs
  - Compression with image-min
- **Fonts:**
  - **Icon Fonts:** Generate from a folder of SVGs
  - Folder and `.sass` mixin for including WebFonts
- **Development Mode:**
  - File Watching and Live Reloading with [BrowserSync](http://www.browsersync.io/)
  - Source Maps
- **Production Builds:**
  - JS and CSS are uglified and minified
  - All filneames are revisioned with an md5 hash, a `rev-manifest.json` file is generated and all asset references are updated in html, css, and js
  - File size reporting
  - Local production sever for testing
- **Testing:**
  - JS test examples with Karma, Mocha, Chai, Sinon
  - Travis CI integration
- **Deployment:**
  - Quickly deploy `public` folder to gh-pages (`gulp deploy` task)

## Process and Conventions

### HTML Templates

All 3 sites are in one repo. All 3 sites are very similar and share components. The scaffolding had to be re imagined so here it is:

High level pages are in ```_layouts/```; this includes:
- Main Site ```/main-application.html```
- College Fair Site ```/fair-application.html```
- National Conference Site ```/conference-application.html```

Next; each Page within layout such as ```/main/index.html```, ```/main/search.html```, etc. these are in the following folders:
- Main Site ```/main```
- College Fair Site ```/fair```
- National Conference Site ```/conference```

These files have basic includes of ```_shared``` markup, static markup and components. These may contain components, but should only appear once per page. Within each layout are 'shared' markup, this includes:
- Head
- Hero
- Navigation
- Footer
- Etc.

Within the shared markup are components, this can include:
- Card & Blocks
- Search entries
- Calendar entries

> There is a blurred line between what is a component and what is shared.

We should adhere to the following: 

- Components are small; repeatable bits of HTML. They can be repeated multiple times in a page. They should not have *ANY* includes. This would include a card block or a search entry.
- Shared includes repeated code but not more than once on a page. These are more unique at the page level, but not at the site level. For example navigation should only appear once per page, but on several pages within a site.
- Site folders have the pages within the site such as ```conference/search.html``` or ```fair/index.html```
- Layouts have the master pages of each site

## Basic Usage

Make sure Node is installed. THis was developed using node -v 5.0.0

### Install Dependencies
```
npm install
```

### Start compiling, serving, and watching files
```
npm run gulp
```

(or `npm run development`)

This runs `gulp` from `./node_modules/bin`, using the version installed with this project, rather than a globally installed instance. All commands in the package.json `scripts` work this way. The `gulp` command runs the `default` task, defined in `gulpfile.js/tasks/default.js`. 

All files will compile in development mode (uncompressed with source maps). [BrowserSync](http://www.browsersync.io/) will serve up files to `localhost:3000` and will stream live changes to the code and assets to all connected browsers. Don't forget about the additional BrowserSync tools available on `localhost:3001`!

To run any other existing task, simply add the task name after the `gulp` command. Example:

```bash
npm run gulp production
```

### Configuration
Directory and top level settings are conveniently exposed in `gulpfile.js/config.json`. All task configuration objects have `src` and `dest` directories specified. These are relative to `root.src` and `root.dest` respectively. Each configuration also has an extensions array. This is used for file watching, and file deleting/replacing. 

If there is a feature you do not wish to use on your project, simply delete the configuration, and the task will be skipped.

### Build production-ready files
```
npm run production
```

This will compile revisions and compressed files to `./public`. To build production files and preview them locally, run 

```
npm run demo
```

This will start a static server that serves your production files to http://localhost:5000. This is primarily meant as a way to preview your production build locally, not necessarily for use as a live production server.

webpack-multi-config.js

Line 12 | var filenamePattern = env === 'production' ? '[name]-[hash].js' : '[name].js'

Remove: env === 'production' ? '[name]-[hash].js' : 

Line 12 | var filenamePattern = '[name].js'

Remove .pipe(rev()) from rev-css.js and rev-assets.js

## Task Details
### JS
```
gulpfile.js/tasks/webpackWatch
gulpfile.js/tasks/webpackProduction
```
Modular ES6 with [Babel](http://babeljs.io/) and [Webpack](http://webpack.github.io/)

If you need to add a new task, add your ```taskName.js``` to the tasks folder, then add the task to ```tasks/default.js``` in the ```gulpSequence()``` function.

Adjust the webpack config (`.gulpfile.js/config/webpack`) for the project.

There are a couple of webpack options exposed in the top-level `gulpfile.js/config.json` file.

`entries`: Discrete js bundle entry points. A js file will be bundled for each item. Paths are relative to the `javascripts` folder. This maps directly to `webpackConfig.entry`.

`extractSharedJs`: Creates a `shared.js` file that contains any modules shared by multiple bundles. Useful on large sites with discrete js running on different pages that may share common modules or libraries. Not typically needed on smaller sites.

If you want to mess with the specifics of the webpack config, check out `gulpfile.js/lib/webpack-multi-config.js`.

Vendor script go in the ```javascript/vendor/``` folder and are bundled via webpack.

Unbundled javascript files are for files what just need to be copied over, not bundled. This is used it bundling vendor scripts causes errors. On this project ```interdimentional.js``` is a vendor script, but when bundled, it cause errors.

### CSS
```
gulpfile.js/tasks/css
```
Your Sass gets run through Autoprefixer, so don't prefix! The examples use the indented `.sass` syntax, but use whichever you prefer...I still use a prefix mixin.

## BEM

The BEM approach ensures that everyone who participates in the development of a website works with a single codebase and speaks the same language. Using proper naming will prepare you for the changes in design of the website. This project uses the following naming conventions:


``` css
block-name__element-name--modifier
primary-nav__logo--sticky
```

### Block

Encapsulates a standalone entity that is meaningful on its own. While blocks can be nested and interact with each other, semantically they remain equal; there is no precedence or hierarchy. Holistic entities without DOM representation (such as controllers or models) can be blocks as well.

### Element

Parts of a block and have no standalone meaning. Any element is semantically tied to its block.

### Modifier

Flags on blocks or elements. Use them to change appearance, behavior or state.

```
<nav class="full-nav full-nav--visible">
	<ul class="full-nav__menu">
		<li class="full-nav__item"></li>
		<li class="full-nav__item"></li>
		<li class="full-nav__item"></li>
		<li class="full-nav__item"></li>
		<li class="full-nav__item"></li>
	</ul>
</nav>
```

### HTML
```
gulpfile.js/tasks/html
```
Robust templating with [Nunjucks](https://mozilla.github.io/nunjucks/). Nunjucks is nearly identical in syntax to Twig (PHP), and replaces Swig (and Twig-like js templating language), which is no longer maintained. I have only a few times where I use variables for adding a class and not making a whole new component. Let say I need a top border on one component on a page but not on another, instead of making a new component i just pass a class of ```component--border-top``` to the include:

```
{% set classNames = 'article--top-border' %}
{% include './_components/full-block-row.html' %}
```

In the component, I need to add:

```
<article class="article__row article--white {{ classNames }}">
  ...
</article>
```
For class names I use the variable className. 

> Nunjucks variable are scoped with in the document and it's children

There is no way to pass an argument or variable directly to an include, and it will be available to all includes on the page. So if we have anything generic we need to set the variable to "" or null. This is probably it's greatest drawback, so if we set className = "block--red"; and have an include later that calls for className it will need to be set before the include. Here is an example:

```
-- index.html
{% set classNames = 'article--top-border' %}
{% include './_components/first-block.html' %}

{% set classNames = '' %}
{% include './_components/different-block.html' %}

-- first-block.html
<article class="article__row article--white {{ classNames }}">
  ...
</article>


-- different-block.html
<article class="article__row article--white {{ classNames }}">
  ...
</article>
```

If we don't unset the variable classNames it will be available in different-block.html which might be undesirable and worth noting. If the variable is not called on in any of the includes then all is well. We just have to be mindful; if you see a class where it shouldnt be this is probably the culprit.


A global data file is set up at [src/html/data/global.json](src/html/data/global.json), is read in by the `html` task, and exposes the propertiesto your html templates. See [social-icons-font.html](src/html/shared/social-icons-font.